from Agent import Agent
from datetime import datetime
import json

class Transcript:
    """
    A comprehensive transcript management system for recording and formatting debate sessions.
    
    This class handles the recording, storage, and presentation of debate conversations
    between agents. It maintains a chronological record of all messages with timestamps
    and provides various formatting options for display and file output.
    
    The transcript system is designed to work with Agent instances and automatically
    captures metadata including timestamps, agent information, and message content
    in a structured format suitable for both real-time display and permanent storage.
    
    Attributes:
        messages (list): Chronologically ordered list of message dictionaries.
                        Each entry contains:
                        - timestamp (datetime): When the message was recorded
                        - agent (Agent): The Agent instance that sent the message  
                        - message (str): The actual message content
    
    Example:
        >>> transcript = Transcript()
        >>> agent = Agent("Alice", "A thoughtful debater", "Climate policy")
        >>> transcript.add_message(agent, "I believe we need stronger action...")
        >>> print(transcript.print_last_message())
    """
    def __init__(self):
        """
        Initialize a new empty Transcript instance.
        
        Creates a new transcript with an empty message list ready to record
        debate interactions. The transcript starts with no messages and will
        build up a chronological record as agents participate in the discussion.
        
        No parameters are required as the transcript begins empty and is
        populated through the add_message() method during debate sessions.
        """
        self.messages = []
        
    def add_message(self, agent: Agent, message: str):
        """
        Record a new message from an agent with automatic timestamping.
        
        Adds a new entry to the transcript with the current timestamp, agent
        information, and message content. This is the primary method for building
        up the debate record during active discussions.
        
        Args:
            agent (Agent): The Agent instance that is sending the message.
                          This should be a Debater, Moderator, or base Agent object
                          that provides name and side information.
            message (str): The actual message content or response from the agent.
                          Can include multi-line text, arguments, rebuttals, etc.
        
        Note:
            The timestamp is automatically generated using datetime.now() when
            the message is added, not when it was originally generated by the agent.
            
        Example:
            >>> transcript = Transcript()
            >>> debater = Debater("Alice", "Lawyer", "Tax policy", "Pro")
            >>> transcript.add_message(debater, "Taxes should be progressive because...")
        """
        self.messages.append({"timestamp": datetime.now(), "agent": agent, "message": message})
        
    def print_transcript(self, topic, pro: Agent, con: Agent, final=False):
        """
        Generate a formatted string representation of the complete debate transcript.
        
        Creates a comprehensive, human-readable transcript with headers, participant
        information, timestamps, and properly formatted message content. Suitable
        for console display, file output, or providing context to agents.
        
        Args:
            topic (str): The debate topic or resolution being discussed.
            pro (Agent): The Agent arguing for the pro side of the debate.
                        Used for header information and identification.
            con (Agent): The Agent arguing for the con side of the debate.
                        Used for header information and identification.
            final (bool, optional): Whether this is the final transcript output.
                                   If True, adds an "[END OF DEBATE]" footer.
                                   Defaults to False.
        
        Returns:
            str: Formatted transcript string including:
                 - Header with topic and participant names
                 - Chronological message list with timestamps and speaker identification
                 - Message separators for readability
                 - Optional end-of-debate footer
        
        Example:
            >>> transcript_text = transcript.print_transcript(
            ...     "Universal Healthcare", pro_agent, con_agent, final=True
            ... )
            >>> print(transcript_text)
        """
        r_string = ""
        r_string += "[TRANSCRIPT OF DEBATE]\n\n"
        r_string += "="*40 + "\n"
        r_string += f"Topic: {topic}\n"
        r_string += f"Pro: {pro.name}  |  Con: {con.name}\n"
        r_string += "="*40 + "\n\n"
        
        # Add each message with timestamp and speaker information
        for entry in self.messages:
            time_str = entry["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
            r_string += f"[{time_str}] {entry['agent'].name} ({entry['agent'].side}):\n\t{entry['message']}\n"
            r_string += "-"*40 + "\n\n"
        
        # Add final marker if this is the complete transcript
        if final:
            r_string += "="*40 + "\n\n"
            r_string += "[END OF DEBATE]"
            
        return r_string
    
    def print_last_message(self):
        """
        Format and return the most recently added message.
        
        Retrieves the last message from the transcript and formats it for display
        with timestamp and speaker identification. Useful for showing real-time
        updates during active debates or for confirming the last contribution.
        
        Returns:
            str: Formatted string containing the last message with timestamp
                 and speaker info, or empty string if no messages exist.
                 Format: "[YYYY-MM-DD HH:MM:SS] SpeakerName (Side):\n\tMessage\n\n"
        
        Example:
            >>> transcript.add_message(agent, "That's an interesting point...")
            >>> print(transcript.print_last_message())
            [2024-01-15 14:30:22] Alice (Pro):
                That's an interesting point...
        """
        if not self.messages:
            return ""
        
        # Get the most recent message
        entry = self.messages[-1]
        time_str = entry["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
        return f"[{time_str}] {entry['agent'].name} ({entry['agent'].side}):\n\t{entry['message']}\n\n"
    
    def save_transcript(self, filename: str, pro: Agent, con: Agent, topic: str):
        """
        Save the complete debate transcript to a text file.
        
        Writes the full formatted transcript to a specified file with UTF-8 encoding.
        The saved file includes all the same formatting as print_transcript() with
        the final=True flag, creating a permanent record of the debate session.
        
        Args:
            filename (str): Path and name for the output file. Should include
                           .txt extension for clarity. Can be relative or absolute path.
            pro (Agent): The Agent that argued for the pro side.
                        Used for generating the file header and content.
            con (Agent): The Agent that argued for the con side.
                        Used for generating the file header and content.
            topic (str): The debate topic or resolution that was discussed.
        
        Raises:
            IOError: If the file cannot be created or written to due to permissions
                    or invalid path.
            UnicodeEncodeError: If message content contains characters that cannot
                               be encoded in UTF-8 (rare in practice).
        
        Example:
            >>> transcript.save_transcript(
            ...     "healthcare_debate_2024.txt", 
            ...     pro_agent, 
            ...     con_agent, 
            ...     "Universal Healthcare"
            ... )
        """
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(self.print_transcript(topic, pro, con, final=True))